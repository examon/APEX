rm -rf build
mkdir build
cd build
cmake ..
make
cd ..

# =============================================================================
# Running code formatter ======================================================

clang-format -style=llvm -i apex/*.cpp

# =============================================================================
# Compile to bytecode and run basic opts and than our opt =====================

# compile without anything
clang -O0 -c -emit-llvm c-code/test.c -o build/test.bc

# run some basic optimizations, so the IR is cleaner
opt -o build/test_after_default_opt.bc -mem2reg -dce -loop-simplify -simplifycfg build/test.bc > /dev/null

# run our pass
opt -o build/test_after_apex.bc -load build/apex/libAPEXPass.so -apex < build/test_after_default_opt.bc > /dev/null

# ==============================================================================
# Generate callgraphs before and after =========================================

# run callgraph exporter
cd build

opt -dot-callgraph test_after_default_opt.bc > /dev/null
mv callgraph.dot callgraph_default_opt.dot
dot callgraph_default_opt.dot -Tsvg -Tsvgz -O

opt -dot-callgraph test_after_apex.bc > /dev/null
mv callgraph.dot callgraph_apex.dot
dot callgraph_apex.dot -Tsvg -Tsvgz -O

cd ..
# callgraph export end

# ==============================================================================
# Disassemble bytecode so We can look inside ===================================

llvm-dis build/test.bc
llvm-dis build/test_after_default_opt.bc
llvm-dis build/test_after_apex.bc

# ==============================================================================
# Run generated bytecodes ======================================================

# run bytecode after basic opts
echo "========= running test.bc"
lli build/test.bc

# run bytecode after basic opts
echo "========= running test_after_default_opt.bc"
lli build/test_after_default_opt.bc

# run pass and execute modified bytecode
echo "========= running test_after_apex.bc"
lli build/test_after_apex.bc
