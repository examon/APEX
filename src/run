#!/bin/bash

# Created by Tomas Meszaros (exo at tty dot com, tmeszaro at redhat dot com)
#
# Published under Apache 2.0 license.
# See LICENSE for details.

# What is this:
# Script for building APEX as LLVM pass and then generating bytecode from
# input before and after running APEX (+running code formatting,
# generating images, etc.)

# =============================================================================
# User Input ==================================================================
FILE="c-code/example_mod2.c"
LINE=11

# user needs to compile the input with debug symbols and emit llvm
INPUT_SOURCE="c-code/example_mod2.c"
clang -O0 -g -c -emit-llvm ${INPUT_SOURCE} -o build/${BYTECODE_FROM_INPUT}

BYTECODE_FROM_INPUT="bytecode_from_input.bc" # No optimizations.

# =============================================================================
# Constants ===================================================================

APEX_LOG="apex.log"
APEX_OUT="apex.out"
INPUT_LIB="apex/apexlib.c"

# Generated bytecodes during all stages of processing.
BYTECODE_FROM_APEXLIB="bytecode_from_apexlib.bc" # Compiled libraries from ${INPUT_LIB}
BYTECODE_FROM_LINKED_INPUT_LIB="bytecode_from_linked.bc" # Linked input and lib bytecode. APEXPass will work with this.
LINKED_DISASSEMBLY="bytecode_from_linked.ll"
BYTECODE_FROM_APEX="bytecode_from_apex.bc" # APEXPass bytecode.

# =============================================================================
# Running code formatter ======================================================

echo "========= Running clang-format."

clang-format -style=llvm -i apex/*.cpp apex/*.h

# =============================================================================
# Compile to bytecode and run basic opts and than our opt =====================

echo "========= Compiling apexlib."

# compile apex lib
clang -O0 -lm -g -c -emit-llvm ${INPUT_LIB} -o build/${BYTECODE_FROM_APEXLIB}


echo "========= Linking input with apex lib."
# We are linking input after basic opts.
llvm-link build/${BYTECODE_FROM_APEXLIB} build/${BYTECODE_FROM_INPUT} -S -o=build/${LINKED_DISASSEMBLY}
# Produce readable IR for logging purposes.
llvm-as build/${LINKED_DISASSEMBLY} -o build/${BYTECODE_FROM_LINKED_INPUT_LIB}

echo "========= Running APEXPass."

# run APEXPass without additional opts
opt -o build/${BYTECODE_FROM_APEX} \
    -load build/apex/libAPEXPass.so \
    -apex -file=${FILE} -line=${LINE} \
    < build/${BYTECODE_FROM_LINKED_INPUT_LIB} 2> ${APEX_LOG}

## run APEXPass with ${BASIC_OPTS}
#opt -o build/${BYTECODE_FROM_APEX} \
#    -load build/apex/libAPEXPass.so \
#    -apex ${BASIC_OPTS} -file=${FILE} -line=${LINE} \
#    < build/${BYTECODE_FROM_LINKED_INPUT_LIB}  2> ${APEX_LOG}


# ==============================================================================
# Generate callgraphs before and after =========================================

echo "========= Exporting callgraphs."

# Run callgraph exporter.
cd build
rm -rf callgraphs
mkdir callgraphs
cd callgraphs

opt -dot-callgraph ../${BYTECODE_FROM_INPUT} > /dev/null
mv callgraph.dot callgraph_no_opt.dot
dot callgraph_no_opt.dot -Tsvg -O

opt -dot-callgraph ../${BYTECODE_FROM_APEX} > /dev/null
mv callgraph.dot callgraph_apex_opt.dot
dot callgraph_apex_opt.dot -Tsvg -O

cd ../..


# ==============================================================================
# DG tools output ==============================================================

echo "========= Running dg tools."

cd build
rm -rf dg_tools
mkdir dg_tools
cd dg_tools


../../dg/build/tools/llvm-dg-dump ../${BYTECODE_FROM_INPUT} > llvm_dg_dump_no_opt.dot
dot llvm_dg_dump_no_opt.dot -Tpdf -O

../../dg/build/tools/llvm-dg-dump -no-control ../${BYTECODE_FROM_INPUT} > llvm_dg_dump_no_control_no_opt.dot
dot llvm_dg_dump_no_control_no_opt.dot -Tpdf -O

../../dg/build/tools/llvm-dg-dump -no-data ../${BYTECODE_FROM_INPUT} > llvm_dg_dump_no_data_no_opt.dot
dot llvm_dg_dump_no_data_no_opt.dot -Tpdf -O

../../dg/build/tools/llvm-dg-dump -bb-only ../${BYTECODE_FROM_INPUT} > llvm_dg_dump_bb_only_no_opt.dot
dot llvm_dg_dump_bb_only_no_opt.dot -Tpdf -O

../../dg/build/tools/llvm-ps-dump -dot ../${BYTECODE_FROM_INPUT} > llvm_ps_dump_no_opt.dot
dot llvm_ps_dump_no_opt.dot -Tsvgz -O

../../dg/build/tools/llvm-rd-dump -dot ../${BYTECODE_FROM_INPUT} > llvm_rd_dump_no_opt.dot
dot llvm_rd_dump_no_opt.dot -Tpdf -O

cd ../..


# ==============================================================================
# Disassemble bytecode so We can look inside ===================================

echo "========= Disassembling llvm bytecode."

llvm-dis build/${BYTECODE_FROM_INPUT}
llvm-dis build/${BYTECODE_FROM_APEX}
llvm-dis build/${BYTECODE_FROM_APEXLIB}


# ==============================================================================
# Run generated bytecodes ======================================================

# run bytecode after basic opts
echo "========= Running ${BYTECODE_FROM_INPUT}"
lli build/${BYTECODE_FROM_INPUT}

# run apexpass and execute modified bytecode
echo "========= Running ${BYTECODE_FROM_APEX}"
lli build/${BYTECODE_FROM_APEX} > ${APEX_OUT}
